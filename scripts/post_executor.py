import streamlit as st
import requests
import gspread
import time
import random
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from requests.auth import HTTPBasicAuth
import json
import re
import pandas as pd
from urllib.parse import urlparse
import io
from PIL import Image, ImageDraw, ImageFont
import base64
import tempfile
import os
import threading
import traceback

# ========================
# Ë®≠ÂÆöÂÄ§
# ========================
SHEET_ID = '1sV0r6LavB4BgU7jGaa5C-GdyogUpWr_y42a-tNZXuFo'
PROJECT_CONFIGS = {
    'kaitori_life': {
        'worksheet': 'Ë≤∑ÂèñLIFEÂêë„Åë',
        'sites': ['selectad', 'thrones'],
        'max_posts': 20
    },
    'osaifu_rescue': {
        'worksheet': '„ÅäË≤°Â∏É„É¨„Çπ„Ç≠„É•„ÉºÂêë„Åë',
        'sites': ['ykikaku', 'efdlqjtz'],
        'max_posts': 20
    },
    'kure_kaeru': {
        'worksheet': '„ÇØ„É¨„Åã„Åà„ÇãÂêë„Åë',
        'sites': ['selectadvance', 'welkenraedt'],
        'max_posts': 20
    },
    'red_site': {
        'worksheet': 'Ëµ§„ÅÑ„Çµ„Ç§„ÉàÂêë„Åë',
        'sites': ['ncepqvub', 'kosagi'],
        'max_posts': 20
    }
}

# WordPressË®≠ÂÆö
WP_CONFIGS = {
    'ykikaku': {
        'url': 'https://ykikaku.v2006.coreserver.jp/',
        'user': 'ykikaku',
        'password': 'QnV8 5VlW RwZN YV4P zAcl Gfce'
    },
    'efdlqjtz': {
        'url': 'https://www.efdlqjtz.com/',
        'user': 'efdlqjtz',
        'password': 'nJh6 Gqm6 qfPn T6Zu WQGV Aymx'
    },
    'selectadvance': {
        'url': 'https://selectadvance.v2006.coreserver.jp/',
        'user': 'selectadvance',
        'password': '6HUY g7oZ Gow8 LBCu yzL8 cR3S'
    },
    'welkenraedt': {
        'url': 'https://www.welkenraedt-online.com/',
        'user': 'welkenraedtonline',
        'password': 'yzn4 6nlm vtrh 8N4v oxHl KUvf'
    },
    'ncepqvub': {
        'url': 'https://www.ncepqvub.com/',
        'user': 'ncepqvub',
        'password': 'ZNdJ IGoK Wdj3 mNz4 Xevp KGFj'
    },
    'kosagi': {
        'url': 'https://www.kosagi.biz/',
        'user': 'kosagi',
        'password': 'VsGS VU5J cKx8 HM6p oLEb VdNH'
    },
    'selectad': {
        'url': 'https://selectad.v2006.coreserver.jp/',
        'user': 'selectad',
        'password': 'xVA8 6yxD TdkP CJE4 yoQN qAHn'
    },
    'thrones': {
        'url': 'https://www.thrones.jp/',
        'user': 'thrones',
        'password': 'Fz9k fB3y wJuN tL8m zPqX vR4s'
    }
}

# GeminiË®≠ÂÆö
GEMINI_API_KEYS = [
    'AIzaSyBCxQruA6WrmfZHoZ6pTBPRVqkALKvdsT0',
    'AIzaSyAiCODJAE32JYGCTzSKqO2zSp8y7qR0ABC',
    'AIzaSyDEF456HIJKLMNOPQRSTUVWXYZabcdefgh'
]

# ÂÆâÂÖ®Ë®≠ÂÆö
MIN_INTERVAL = 60
MAX_INTERVAL = 120

# ========================
# StreamlitË®≠ÂÆö
# ========================
st.set_page_config(
    page_title="üê∏ „Éñ„É≠„Ç∞Ëá™ÂãïÊäïÁ®ø„ÉÑ„Éº„É´",
    page_icon="üê∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# „Ç´„Çπ„Çø„É†CSS
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #2E7D32, #4CAF50);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stButton > button {
        background: linear-gradient(135deg, #4CAF50, #66BB6A);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .stButton > button:hover {
        background: linear-gradient(135deg, #66BB6A, #4CAF50);
        transform: translateY(-2px);
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .info-box {
        background: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# ========================
# „Çª„ÉÉ„Ç∑„Éß„É≥„Çπ„ÉÜ„Éº„ÉàÂàùÊúüÂåñ
# ========================
if 'gemini_key_index' not in st.session_state:
    st.session_state.gemini_key_index = 0
if 'is_posting' not in st.session_state:
    st.session_state.is_posting = False
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'sheet_data' not in st.session_state:
    st.session_state.sheet_data = None

# ========================
# Ë™çË®º & „Ç∑„Éº„ÉàÂèñÂæó
# ========================
@st.cache_resource
def get_sheets_client():
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    
    # Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâË™çË®ºÊÉÖÂ†±„ÇíÂèñÂæó
    creds_json = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS_JSON')
    if creds_json:
        # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„Åø
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            f.write(creds_json)
            temp_path = f.name
        creds = ServiceAccountCredentials.from_json_keyfile_name(temp_path, scope)
        os.unlink(temp_path)
    else:
        # „É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    
    return gspread.authorize(creds)

# ========================
# „É≠„Ç∞Ê©üËÉΩ
# ========================
def add_log(message, level="info"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = {
        'timestamp': timestamp,
        'message': message,
        'level': level
    }
    st.session_state.log_messages.append(log_entry)
    
    # „É≠„Ç∞„ÅåÂ§ö„Åô„Åé„ÇãÂ†¥Âêà„ÅØÂè§„ÅÑ„ÇÇ„ÅÆ„ÇíÂâäÈô§
    if len(st.session_state.log_messages) > 100:
        st.session_state.log_messages = st.session_state.log_messages[-100:]

def display_logs():
    if st.session_state.log_messages:
        log_container = st.container()
        with log_container:
            for log in st.session_state.log_messages[-20:]:  # ÊúÄÊñ∞20‰ª∂„ÇíË°®Á§∫
                if log['level'] == 'success':
                    st.markdown(f"<div class='success-box'>[{log['timestamp']}] {log['message']}</div>", unsafe_allow_html=True)
                elif log['level'] == 'error':
                    st.markdown(f"<div class='error-box'>[{log['timestamp']}] {log['message']}</div>", unsafe_allow_html=True)
                else:
                    st.markdown(f"<div class='info-box'>[{log['timestamp']}] {log['message']}</div>", unsafe_allow_html=True)

# ========================
# „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉèÁîüÊàê
# ========================
def create_eyecatch_image(title: str, site_key: str) -> bytes:
    width, height = 600, 400
    
    color_schemes = [
        {'bg': '#2E7D32', 'accent': '#66BB6A', 'text': '#FFFFFF'},
        {'bg': '#388E3C', 'accent': '#81C784', 'text': '#FFFFFF'},
        {'bg': '#4CAF50', 'accent': '#8BC34A', 'text': '#FFFFFF'},
        {'bg': '#689F38', 'accent': '#AED581', 'text': '#FFFFFF'},
        {'bg': '#7CB342', 'accent': '#C5E1A5', 'text': '#2E7D32'},
    ]
    
    scheme = random.choice(color_schemes)
    
    img = Image.new('RGB', (width, height), color=scheme['bg'])
    draw = ImageDraw.Draw(img)
    
    # „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ÂäπÊûú
    for i in range(height):
        alpha = i / height
        r = int(int(scheme['bg'][1:3], 16) * (1 - alpha * 0.3))
        g = int(int(scheme['bg'][3:5], 16) * (1 - alpha * 0.3))
        b = int(int(scheme['bg'][5:7], 16) * (1 - alpha * 0.3))
        draw.rectangle([(0, i), (width, i + 1)], fill=(r, g, b))
    
    # Ë£ÖÈ£æÂõ≥ÂΩ¢
    draw.ellipse([-50, -50, 150, 150], fill=scheme['accent'])
    draw.ellipse([width-100, height-100, width+50, height+50], fill=scheme['accent'])
    
    # „Éï„Ç©„É≥„ÉàË®≠ÂÆöÔºà„Éá„Éï„Ç©„É´„Éà„Éï„Ç©„É≥„Éà„Çí‰ΩøÁî®Ôºâ
    try:
        title_font = ImageFont.load_default()
        subtitle_font = ImageFont.load_default()
    except:
        title_font = ImageFont.load_default()
        subtitle_font = ImageFont.load_default()
    
    # „Çø„Ç§„Éà„É´„ÇíÊèèÁîª
    lines = []
    if len(title) > 12:
        for sep in ['ÔºÅ', 'Ôºü', '‚Ä¶', '!', '?']:
            if sep in title:
                idx = title.find(sep)
                if idx > 0:
                    lines = [title[:idx+1], title[idx+1:].strip()]
                    break
        
        if not lines:
            for sep in ['„Å®', '„ÄÅ', '„ÅÆ', '„ÅØ', '„Åå', '„Çí', '„Å´', '‚Ä¶', '„Åß']:
                if sep in title:
                    idx = title.find(sep)
                    if 5 < idx < len(title) - 5:
                        lines = [title[:idx], title[idx:]]
                        break
        
        if not lines:
            mid = len(title) // 2
            lines = [title[:mid], title[mid:]]
    else:
        lines = [title]
    
    y_start = (height - len(lines) * 50) // 2
    
    for i, line in enumerate(lines):
        try:
            bbox = draw.textbbox((0, 0), line, font=title_font)
            text_width = bbox[2] - bbox[0]
        except AttributeError:
            text_width = len(line) * 10
        
        x = (width - text_width) // 2
        y = y_start + i * 50
        
        # ÂΩ±
        draw.text((x + 2, y + 2), line, font=title_font, fill=(0, 0, 0))
        # Êú¨‰Ωì
        draw.text((x, y), line, font=title_font, fill=scheme['text'])
    
    # „Çµ„Ç§„ÉàÂêç
    site_names = {
        'selectadvance': 'ÂæåÊâï„ÅÑ„Ç¢„Éó„É™ÁèæÈáëÂåñÊîªÁï•„Éñ„É≠„Ç∞',
        'welkenraedt': '„Éû„Éç„Éº„Éè„ÉÉ„ÇØ365',
        'ykikaku': '„ÅäË≤°Â∏É„É¨„Çπ„Ç≠„É•„Éº',
        'efdlqjtz': '„Éû„Éç„Éº„Çµ„Éù„Éº„Éà',
        'selectad': 'Ë≤∑ÂèñLIFE',
        'thrones': '„É™„Çµ„Ç§„ÇØ„É´„Éû„Çπ„Çø„Éº',
        'ncepqvub': 'Ëµ§„ÅÑ„Çµ„Ç§„Éà',
        'kosagi': '„ÅÜ„Åï„Åé„Éï„Ç°„Ç§„Éä„É≥„Çπ'
    }
    
    site_name = site_names.get(site_key, 'Financial Blog')
    
    try:
        bbox = draw.textbbox((0, 0), site_name, font=subtitle_font)
        text_width = bbox[2] - bbox[0]
    except AttributeError:
        text_width = len(site_name) * 8
    
    x = (width - text_width) // 2
    draw.text((x, height - 50), site_name, font=subtitle_font, fill=scheme['text'])
    
    # ‰∏äÈÉ®„É©„Ç§„É≥
    draw.rectangle([50, 40, width-50, 42], fill=scheme['text'])
    
    # „Éê„Ç§„Éà„Éá„Éº„Çø„Å®„Åó„Å¶Ëøî„Åô
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='JPEG', quality=90)
    img_byte_arr.seek(0)
    
    return img_byte_arr.getvalue()

def upload_image_to_wordpress(image_data: bytes, filename: str, site_config: dict) -> int:
    media_endpoint = f'{site_config["url"]}wp-json/wp/v2/media'
    
    import string
    safe_filename = ''.join(c for c in filename if c in string.ascii_letters + string.digits + '-_.')
    
    if not safe_filename or safe_filename == '.jpg':
        safe_filename = f"eyecatch_{int(time.time())}.jpg"
    
    if not safe_filename.endswith('.jpg'):
        safe_filename += '.jpg'
    
    headers = {
        'Content-Disposition': f'attachment; filename="{safe_filename}"',
        'Content-Type': 'image/jpeg'
    }
    
    try:
        response = requests.post(
            media_endpoint,
            data=image_data,
            headers=headers,
            auth=HTTPBasicAuth(site_config['user'], site_config['password'])
        )
        
        if response.status_code == 201:
            media_id = response.json()['id']
            add_log(f"‚úÖ „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü: {safe_filename} (ID: {media_id})", "success")
            return media_id
        else:
            add_log(f"‚ùå ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: {response.status_code}", "error")
            return None
            
    except Exception as e:
        add_log(f"‚ùå ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: {e}", "error")
        return None

# ========================
# Á´∂Âêà‰ªñÁ§æ„Éª„Åù„ÅÆ‰ªñ„É™„É≥„ÇØÁÆ°ÁêÜ
# ========================
@st.cache_data(ttl=300)
def get_competitor_domains():
    try:
        client = get_sheets_client()
        sheet = client.open_by_key(SHEET_ID).worksheet('Á´∂Âêà‰ªñÁ§æ')
        competitors = sheet.get_all_values()[1:]
        
        domains = []
        for row in competitors:
            if row and row[0]:
                domain = row[0].strip()
                if domain.startswith('http'):
                    parsed = urlparse(domain)
                    domain = parsed.netloc
                domains.append(domain.lower())
        
        add_log(f"üìã Á´∂Âêà‰ªñÁ§æ„Éâ„É°„Ç§„É≥ {len(domains)}‰ª∂„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü", "info")
        return domains
    except Exception as e:
        add_log(f"‚ö†Ô∏è Á´∂Âêà‰ªñÁ§æ„É™„Çπ„ÉàÂèñÂæó„Ç®„É©„Éº: {e}", "error")
        return []

@st.cache_data(ttl=300)
def get_other_links():
    try:
        client = get_sheets_client()
        sheet = client.open_by_key(SHEET_ID).worksheet('„Åù„ÅÆ‰ªñ„É™„É≥„ÇØÂÖà')
        rows = sheet.get_all_values()[1:]
        
        other_sites = []
        for row in rows:
            if len(row) >= 2 and row[0] and row[1]:
                other_sites.append({
                    "url": row[0].strip(),
                    "anchor": row[1].strip()
                })
        
        add_log(f"üìã „Åù„ÅÆ‰ªñ„É™„É≥„ÇØÂÖà {len(other_sites)}‰ª∂„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü", "info")
        
        if not other_sites:
            other_sites = [
                {"url": "https://www.fsa.go.jp/", "anchor": "ÈáëËûçÂ∫Å"},
                {"url": "https://www.boj.or.jp/", "anchor": "Êó•Êú¨ÈäÄË°å"},
            ]
        
        return other_sites
        
    except Exception as e:
        add_log(f"‚ùå „Åù„ÅÆ‰ªñ„É™„É≥„ÇØÂÖà„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}", "error")
        return [
            {"url": "https://www.fsa.go.jp/", "anchor": "ÈáëËûçÂ∫Å"},
            {"url": "https://www.boj.or.jp/", "anchor": "Êó•Êú¨ÈäÄË°å"},
        ]

def get_other_link():
    other_sites = get_other_links()
    competitor_domains = get_competitor_domains()
    
    available_sites = []
    for site in other_sites:
        site_domain = urlparse(site['url']).netloc.lower()
        if not any(comp in site_domain for comp in competitor_domains):
            available_sites.append(site)
    
    if available_sites:
        site = random.choice(available_sites)
        return site['url'], site['anchor']
    
    return None, None

# ========================
# GeminiË®ò‰∫ãÁîüÊàê
# ========================
def _get_gemini_key():
    key = GEMINI_API_KEYS[st.session_state.gemini_key_index % len(GEMINI_API_KEYS)]
    st.session_state.gemini_key_index += 1
    return key

def call_gemini(prompt: str) -> str:
    api_key = _get_gemini_key()
    endpoint = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key={api_key}'
    
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {"temperature": 0.7}
    }
    
    response = requests.post(endpoint, json=payload, timeout=60)
    if response.status_code != 200:
        raise Exception(f"Gemini API „Ç®„É©„Éº: {response.status_code}")
    result = response.json()
    return result['candidates'][0]['content']['parts'][0]['text']

def generate_article_with_link(theme: str, url: str, anchor_text: str) -> dict:
    if not theme or theme.strip() == "":
        theme = "ÈáëËûç„ÉªÊäïË≥á„ÉªË≥áÁî£ÈÅãÁî®"
        auto_theme = True
    else:
        auto_theme = False
    
    if auto_theme:
        theme_instruction = "ÈáëËûçÁ≥ªÔºàÊäïË≥á„ÄÅ„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„Éâ„ÄÅ„É≠„Éº„É≥„ÄÅË≥áÁî£ÈÅãÁî®„Å™„Å©Ôºâ„Åã„ÇâËá™Áî±„Å´„ÉÜ„Éº„Éû„ÇíÈÅ∏„Çì„Åß"
    else:
        theme_instruction = f"„Äå{theme}„Äç„Çí„ÉÜ„Éº„Éû„Å´"
    
    prompt = f"""
# ÂëΩ‰ª§Êõ∏:
{theme_instruction}„ÄÅË™≠ËÄÖ„Å´‰æ°ÂÄ§„ÅÆ„ÅÇ„ÇãË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

# Ë®ò‰∫ã„Å´Âê´„ÇÅ„Çã„É™„É≥„ÇØÔºà1„Å§„ÅÆ„ÅøÔºâ:
URL: {url}
„Ç¢„É≥„Ç´„Éº„ÉÜ„Ç≠„Çπ„Éà: {anchor_text}

# Âá∫ÂäõÂΩ¢Âºè:
„ÉªÊúÄÂàù„ÅÆË°å„Å´È≠ÖÂäõÁöÑ„Å™„Çø„Ç§„Éà„É´„ÇíÂá∫ÂäõÔºà„Çø„Ç∞„Å™„ÅóÔºâ
„Éª„Åù„ÅÆÂæå„ÄÅHTMLÂΩ¢Âºè„ÅßÊú¨Êñá‰ΩúÊàê
„Éª„É™„É≥„ÇØ„ÇíËá™ÁÑ∂„Å´ÊåøÂÖ•Ôºà1Âõû„ÅÆ„ÅøÔºâ

# HTMLË®òÊ≥ï:
„ÉªË¶ãÂá∫„Åó: <h2>, <h3>„ÅÆ„Åø‰ΩøÁî®ÔºàH1„Çø„Ç∞„ÅØ‰ΩøÁî®Á¶ÅÊ≠¢Ôºâ
„ÉªÊÆµËêΩ: <p>„Çø„Ç∞„ÅßÂõ≤„ÇÄ
„Éª**ÈáçË¶Å**: ÂêÑ<p>„Çø„Ç∞„ÅÆÂæå„Å´ÂøÖ„ÅöÁ©∫Ë°å„ÇíÂÖ•„Çå„Çã
„Éª„É™„É≥„ÇØ: <a href="URL" target="_blank" rel="noopener noreferrer">„Ç¢„É≥„Ç´„Éº„ÉÜ„Ç≠„Çπ„Éà</a>
„Éª„É™„Çπ„Éà: <ul><li>

# ÈáçË¶Å„Å™Á¶ÅÊ≠¢‰∫ãÈ†Ö:
„Éª<h1>„Çø„Ç∞„ÅØÁµ∂ÂØæ„Å´‰ΩøÁî®„Åó„Å™„ÅÑÔºà„Çø„Ç§„Éà„É´„ÅØWordPress„ÅåËá™ÂãïË®≠ÂÆö„Åô„Çã„Åü„ÇÅÔºâ
„ÉªÊú¨ÊñáÂÜÖ„Å´„Çø„Ç§„Éà„É´„ÇíÈáçË§á„Åï„Åõ„Å™„ÅÑ

# ÊÆµËêΩ„ÅÆÊõ∏„ÅçÊñπ„ÅÆ‰æã:
<p>„Åì„Çå„ÅØÊúÄÂàù„ÅÆÊÆµËêΩ„Åß„Åô„ÄÇ</p>

<p>„Åì„Çå„ÅØÊ¨°„ÅÆÊÆµËêΩ„Åß„Åô„ÄÇÊÆµËêΩÈñì„Å´Á©∫Ë°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ</p>

<p>„Åì„ÅÆ„Çà„ÅÜ„Å´ÂêÑÊÆµËêΩ„ÅÆÂæå„Å´Á©∫Ë°å„ÇíÂÖ•„Çå„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>

# Ë®ò‰∫ã„ÅÆË¶Å‰ª∂:
„Éª2000-2500ÊñáÂ≠ó
„ÉªÂ∞ÇÈñÄÁöÑ„Åß„ÅÇ„Çä„Å™„Åå„ÇâÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑ
„ÉªÂÖ∑‰ΩìÁöÑ„Å™Êï∞ÂÄ§„ÇÑ‰∫ã‰æã„ÇíÂê´„ÇÅ„Çã
„ÉªË™≠ËÄÖ„ÅÆÊÇ©„Åø„ÇíËß£Ê±∫„Åô„ÇãÂÜÖÂÆπ
„ÉªÂêÑÊÆµËêΩ„ÅØ2-3ÊñáÁ®ãÂ∫¶„Åß„Åæ„Å®„ÇÅ„Çã

# ÈáçË¶Å:
„Éª„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„ÉºÔºà„Äá„Äá„Å™„Å©Ôºâ„ÅØ‰ΩøÁî®Á¶ÅÊ≠¢
„Éª„Åô„Åπ„Å¶ÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ„ÅßË®òËø∞
„Éª„É™„É≥„ÇØ„ÅØÊåáÂÆö„Åï„Çå„Åü„ÇÇ„ÅÆ„ÇíÊ≠£Á¢∫„Å´‰ΩøÁî®
„ÉªÂøÖ„ÅöÂêÑ<p>„Çø„Ç∞„ÅÆÂæå„Å´Á©∫Ë°å„ÇíÂÖ•„Çå„Çã
"""
    
    try:
        response = call_gemini(prompt)
        
        lines = response.strip().split('\n')
        title = lines[0].strip()
        content = '\n'.join(lines[1:]).strip()
        
        # HTMLÂÜÖÂÆπ„ÅÆÊ§úË®º„Å®‰øÆÊ≠£
        content = re.sub(r'„Äá„Äá|√ó√ó|‚ñ≥‚ñ≥', '', content)
        content = re.sub(r'Ôºà„Åì„Åì„Åß.*?Ôºâ', '', content)
        content = re.sub(r'<p>\s*</p>', '', content)
        content = content.strip()
        
        return {
            "title": title,
            "content": content,
            "theme": theme if not auto_theme else "ÈáëËûç"
        }
        
    except Exception as e:
        add_log(f"‚ùå Ë®ò‰∫ãÁîüÊàê„Ç®„É©„Éº: {e}", "error")
        raise

# ========================
# WordPressÊäïÁ®ø
# ========================
def get_category_id(site_config, category_name):
    if not category_name:
        return None
    
    try:
        endpoint = f"{site_config['url']}wp-json/wp/v2/categories"
        response = requests.get(endpoint)
        
        if response.status_code == 200:
            categories = response.json()
            for cat in categories:
                if cat['name'] == category_name:
                    return cat['id']
        return None
    except:
        return None

def generate_slug_from_title(title):
    keyword_map = {
        'ÊäïË≥á': 'investment',
        'Ë≥áÁî£': 'asset',
        'ÈÅãÁî®': 'management',
        'Â¢ó„ÇÑ„Åô': 'increase',
        'Ë≤ØÈáë': 'savings',
        'ÁØÄÁ¥Ñ': 'saving',
        '„ÇØ„É¨„Ç∏„ÉÉ„Éà': 'credit',
        '„Ç´„Éº„Éâ': 'card',
        '„É≠„Éº„É≥': 'loan',
        'ÈáëËûç': 'finance',
        'ÈäÄË°å': 'bank',
        '‰øùÈô∫': 'insurance',
        'ÂÆüË∑µ': 'practice',
        'ÊñπÊ≥ï': 'method',
        'Êà¶Áï•': 'strategy',
        '„Ç¨„Ç§„Éâ': 'guide',
        'ÂàùÂøÉËÄÖ': 'beginner',
        'ÂÆåÂÖ®': 'complete',
        'ÂäπÊûú': 'effect',
        'ÊàêÂäü': 'success',
        'ÈÅ∏„Å≥Êñπ': 'selection',
        'ÊØîËºÉ': 'comparison',
        'Ê¥ªÁî®': 'utilization',
        '„Åä„Åô„Åô„ÇÅ': 'recommend',
        'Âü∫Á§é': 'basic',
        'Áü•Ë≠ò': 'knowledge'
    }
    
    slug_parts = ['money']
    
    for jp_word, en_word in keyword_map.items():
        if jp_word in title:
            slug_parts.append(en_word)
            break
    
    if len(slug_parts) == 1:
        slug_parts.append('tips')
    
    date_str = datetime.now().strftime('%m%d')
    random_num = random.randint(100, 999)
    
    slug = '-'.join(slug_parts) + f'-{date_str}-{random_num}'
    
    return slug.lower()

def infer_slug_from_promo(promo_url: str, fallback_title: str) -> str:
    try:
        u = urlparse(promo_url)
        host = u.netloc.split(':')[0]
        host_parts = [p for p in host.split('.') if p and p != 'www']
        sld = host_parts[-2] if len(host_parts) >= 2 else (host_parts[0] if host_parts else '')
        last = ''
        if u.path:
            segs = [s for s in u.path.split('/') if s]
            if segs:
                last = segs[-1]
        base = last or sld or fallback_title
    except:
        base = fallback_title or 'money'
    base = re.sub(r'[^a-zA-Z0-9-]+', '-', base.lower()).strip('-')
    if not base:
        base = 'money'
    date_str = datetime.now().strftime('%m%d')
    rnd = random.randint(100, 999)
    return f"{base}-{date_str}-{rnd}"

def post_to_wordpress(article_data: dict, site_key: str, category_name: str = None, 
                      permalink: str = None, schedule_dt: datetime = None,
                      create_eyecatch: bool = True) -> str:
    
    if site_key not in WP_CONFIGS:
        add_log(f"‚ùå ‰∏çÊòé„Å™„Çµ„Ç§„Éà: {site_key}", "error")
        return ""
    
    site_config = WP_CONFIGS[site_key]
    
    if not site_config['user']:
        add_log(f"‚ö†Ô∏è {site_key}„ÅÆË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì", "error")
        return ""
    
    # „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÇíÁîüÊàê„Éª„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    featured_media_id = None
    if create_eyecatch:
        try:
            add_log("üñºÔ∏è „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÇíÁîüÊàê‰∏≠...", "info")
            image_data = create_eyecatch_image(article_data['title'], site_key)
            
            if permalink and permalink.strip():
                image_filename = f"{permalink}.jpg"
            else:
                image_filename = f"{generate_slug_from_title(article_data['title'])}.jpg"
            
            featured_media_id = upload_image_to_wordpress(image_data, image_filename, site_config)
            
            if featured_media_id:
                add_log(f"‚úÖ „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉèË®≠ÂÆöÂÆå‰∫Ü", "success")
            else:
                add_log("‚ö†Ô∏è „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÅÆË®≠ÂÆö„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶Ë®ò‰∫ãÊäïÁ®ø„ÇíÁ∂öË°å", "info")
                
        except Exception as e:
            add_log(f"‚ö†Ô∏è „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉèÁîüÊàê„Ç®„É©„Éº: {e}", "error")
            add_log("„Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅ„Å™„Åó„ÅßË®ò‰∫ãÊäïÁ®ø„ÇíÁ∂öË°å", "info")
    
    endpoint = f"{site_config['url']}wp-json/wp/v2/posts"
    content = article_data['content']
    
    # „Ç´„ÉÜ„Ç¥„É™„ÉºID„ÇíÂèñÂæó
    category_id = get_category_id(site_config, category_name) if category_name else None
    
    # „Çπ„É©„ÉÉ„Ç∞„ÅÆÊ±∫ÂÆö
    if permalink and permalink.strip():
        slug = permalink.strip()
    else:
        slug = generate_slug_from_title(article_data['title'])
    
    post_data = {
        'title': article_data['title'],
        'content': content,
        'slug': slug,
        'categories': [category_id] if category_id else []
    }
    
    # „Ç¢„Ç§„Ç≠„É£„ÉÉ„ÉÅÁîªÂÉè„ÇíË®≠ÂÆö
    if featured_media_id:
        post_data['featured_media'] = featured_media_id
    
    # ‰∫àÁ¥ÑÊäïÁ®ø„ÅÆË®≠ÂÆö
    if schedule_dt and schedule_dt > datetime.now():
        post_data['status'] = 'future'
        post_data['date'] = schedule_dt.strftime('%Y-%m-%dT%H:%M:%S')
    else:
        post_data['status'] = 'publish'
    
    try:
        response = requests.post(
            endpoint,
            auth=HTTPBasicAuth(site_config['user'], site_config['password']),
            headers={'Content-Type': 'application/json'},
            data=json.dumps(post_data)
        )
        
        if response.status_code in (201, 200):
            post_url = response.json().get('link', '')
            add_log(f"‚úÖ WordPressÊäïÁ®øÊàêÂäü ({site_key}): {post_url}", "success")
            return post_url
        else:
            add_log(f"‚ùå WordPressÊäïÁ®øÂ§±Êïó ({site_key}): {response.status_code}", "error")
            add_log(f"„Ç®„É©„ÉºË©≥Á¥∞: {response.text[:500]}...", "error")
            return ""
            
    except Exception as e:
        add_log(f"‚ùå WordPressÊäïÁ®ø„Ç®„É©„Éº ({site_key}): {e}", "error")
        return ""

# ========================
# „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÊìç‰Ωú
# ========================
@st.cache_data(ttl=60)
def load_sheet_data(project_key):
    try:
        if project_key not in PROJECT_CONFIGS:
            return pd.DataFrame()
        
        client = get_sheets_client()
        config = PROJECT_CONFIGS[project_key]
        sheet = client.open_by_key(SHEET_ID).worksheet(config['worksheet'])
        
        rows = sheet.get_all_values()
        if len(rows) <= 1:
            return pd.DataFrame()
        
        headers = rows[0]
        data_rows = rows[1:]
        
        # Êú™Âá¶ÁêÜ„ÅÆ„Åø„Éï„Ç£„É´„Çø
        filtered_rows = []
        for row in data_rows:
            if len(row) >= 5 and row[1] and row[1].strip():
                status = row[4].strip().lower() if len(row) > 4 else ''
                if status in ['', 'Êú™Âá¶ÁêÜ']:
                    # Ë°å„ÇíÈÅ©Âàá„Å™Èï∑„Åï„Å´Ë™øÊï¥
                    adjusted_row = row + [''] * (len(headers) - len(row))
                    filtered_rows.append(adjusted_row[:len(headers)])
        
        if not filtered_rows:
            return pd.DataFrame()
        
        df = pd.DataFrame(filtered_rows, columns=headers)
        df['ÈÅ∏Êäû'] = False
        
        return df
        
    except Exception as e:
        add_log(f"‚ùå „Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}", "error")
        return pd.DataFrame()

def update_sheet_row(project_key, row_data, updates):
    try:
        client = get_sheets_client()
        config = PROJECT_CONFIGS[project_key]
        sheet = client.open_by_key(SHEET_ID).worksheet(config['worksheet'])
        
        # ÂÆ£‰ºùURL„ÅßË°å„ÇíÁâπÂÆö
        all_rows = sheet.get_all_values()
        promo_url = row_data.get('ÂÆ£‰ºùURL', '')
        
        for i, row in enumerate(all_rows[1:], start=2):
            if len(row) > 1 and row[1] == promo_url:
                for col_name, value in updates.items():
                    if col_name in all_rows[0]:
                        col_idx = all_rows[0].index(col_name) + 1
                        sheet.update_cell(i, col_idx, value)
                add_log(f"‚úÖ „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü: Ë°å{i}", "success")
                return True
        
        add_log(f"‚ö†Ô∏è ÂØæË±°Ë°å„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü", "error")
        return False
        
    except Exception as e:
        add_log(f"‚ùå „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÊõ¥Êñ∞„Ç®„É©„Éº: {e}", "error")
        return False

# ========================
# ÊäïÁ®øÂá¶ÁêÜ
# ========================
def process_single_post(row_data, project_key, schedule_times=None):
    try:
        config = PROJECT_CONFIGS[project_key]
        
        # ÁèæÂú®„ÅÆ„Ç´„Ç¶„É≥„Çø„ÉºÂèñÂæó
        current_counter = 0
        if '„Ç´„Ç¶„É≥„Çø„Éº' in row_data and row_data['„Ç´„Ç¶„É≥„Çø„Éº']:
            try:
                current_counter = int(row_data['„Ç´„Ç¶„É≥„Çø„Éº'])
            except:
                current_counter = 0
        
        max_posts = config['max_posts']
        
        if current_counter >= max_posts:
            add_log(f"‚ö†Ô∏è Êó¢„Å´{max_posts}Ë®ò‰∫ãÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô", "info")
            return False
        
        # ‰∫àÁ¥ÑÊôÇÂàª„ÅÆÂèñÂæó
        schedule_dt = None
        if schedule_times and len(schedule_times) > 0:
            schedule_dt = schedule_times[0]
        
        # Ë®ò‰∫ãÂÜÖÂÆπ„ÅÆÊ±∫ÂÆö
        if current_counter == max_posts - 1:
            # 20Ë®ò‰∫ãÁõÆÔºöÂÆ£‰ºùURL
            add_log(f"üìä {max_posts}Ë®ò‰∫ãÁõÆ ‚Üí ÂÆ£‰ºùURL‰ΩøÁî®", "info")
            url = row_data.get('ÂÆ£‰ºùURL', '')
            anchor = row_data.get('„Ç¢„É≥„Ç´„Éº„ÉÜ„Ç≠„Çπ„Éà', project_key)
            category_name = row_data.get('„Ç´„ÉÜ„Ç¥„É™„Éº', '„ÅäÈáë„ÅÆ„Éû„É°Áü•Ë≠ò')
            permalink = row_data.get('„Éë„Éº„Éû„É™„É≥„ÇØ', '')
            
            if not permalink:
                permalink = infer_slug_from_promo(url, row_data.get('„ÉÜ„Éº„Éû', ''))
        else:
            # 1-19Ë®ò‰∫ãÁõÆÔºö„Åù„ÅÆ‰ªñ„É™„É≥„ÇØ
            add_log(f"üìä {current_counter + 1}Ë®ò‰∫ãÁõÆ ‚Üí „Åù„ÅÆ‰ªñ„É™„É≥„ÇØ‰ΩøÁî®", "info")
            url, anchor = get_other_link()
            if not url:
                add_log("‚ùå „Åù„ÅÆ‰ªñ„É™„É≥„ÇØ„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì", "error")
                return False
            category_name = '„ÅäÈáë„ÅÆ„Éû„É°Áü•Ë≠ò'
            permalink = None
        
        # Ë®ò‰∫ãÁîüÊàê
        add_log("üß† Ë®ò‰∫ã„ÇíÁîüÊàê‰∏≠...", "info")
        theme = row_data.get('„ÉÜ„Éº„Éû', '') or 'ÈáëËûç„ÉªÊäïË≥á„ÉªË≥áÁî£ÈÅãÁî®'
        article = generate_article_with_link(theme, url, anchor)
        
        add_log(f"üìù „Çø„Ç§„Éà„É´: {article['title']}", "info")
        add_log(f"üîó ‰ΩøÁî®„É™„É≥„ÇØ: {anchor}", "info")
        
        # ÊäïÁ®øÂÖà„ÅÆÊ±∫ÂÆö
        post_target = row_data.get('ÊäïÁ®øÂÖà', '').strip() or config['sites'][0]
        posted_urls = []
        
        # ÊäïÁ®øÂÆüË°å
        for site_key in config['sites']:
            if post_target in [site_key, '‰∏°Êñπ']:
                add_log(f"üì§ {site_key}„Å´ÊäïÁ®ø‰∏≠...", "info")
                url_result = post_to_wordpress(
                    article, site_key, category_name, permalink, 
                    schedule_dt=schedule_dt, create_eyecatch=True
                )
                if url_result:
                    posted_urls.append(url_result)
        
        if not posted_urls:
            add_log("‚ùå ÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü", "error")
            return False
        
        # „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÊõ¥Êñ∞
        new_counter = current_counter + 1
        updates = {'„Ç´„Ç¶„É≥„Çø„Éº': str(new_counter)}
        
        if new_counter >= max_posts:
            # 20Ë®ò‰∫ãÁõÆÂÆå‰∫Ü
            updates['„Çπ„ÉÜ„Éº„Çø„Çπ'] = 'Âá¶ÁêÜÊ∏à„Åø'
            updates['ÊäïÁ®øURL'] = ', '.join(posted_urls)
            completion_time = (schedule_dt or datetime.now()).strftime("%Y/%m/%d %H:%M")
            if 'ÂÆå‰∫ÜÊó•ÊôÇ' in row_data:
                updates['ÂÆå‰∫ÜÊó•ÊôÇ'] = completion_time
            add_log(f"‚úÖ {max_posts}Ë®ò‰∫ãÂÆå‰∫ÜÔºÅ", "success")
        else:
            add_log(f"üìä „Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞: {new_counter}", "success")
        
        # „Éë„Éº„Éû„É™„É≥„ÇØË®òÈå≤Ôºà20Ë®ò‰∫ãÁõÆ„ÅßÊñ∞Ë¶èÁîüÊàê„Åó„ÅüÂ†¥ÂêàÔºâ
        if current_counter == max_posts - 1 and permalink and '„Éë„Éº„Éû„É™„É≥„ÇØ' in row_data:
            updates['„Éë„Éº„Éû„É™„É≥„ÇØ'] = permalink
        
        update_sheet_row(project_key, row_data, updates)
        
        return True
        
    except Exception as e:
        add_log(f"‚ùå ÊäïÁ®øÂá¶ÁêÜ„Ç®„É©„Éº: {e}", "error")
        add_log(f"Ë©≥Á¥∞: {traceback.format_exc()}", "error")
        return False

# ========================
# UIÊßãÁØâ
# ========================
def main():
    # „Éò„ÉÉ„ÉÄ„Éº
    st.markdown("""
    <div class="main-header">
        <h1>üê∏ „Éñ„É≠„Ç∞Ëá™ÂãïÊäïÁ®ø„ÉÑ„Éº„É´</h1>
        <p>AI-Powered Financial Content Generation</p>
    </div>
    """, unsafe_allow_html=True)
    
    # „Çµ„Ç§„Éâ„Éê„Éº
    with st.sidebar:
        st.header("‚öôÔ∏è Ë®≠ÂÆö")
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû
        project_key = st.selectbox(
            "„Éó„É≠„Ç∏„Çß„ÇØ„Éà",
            options=list(PROJECT_CONFIGS.keys()),
            format_func=lambda x: PROJECT_CONFIGS[x]['worksheet']
        )
        
        # „Éá„Éº„ÇøÊõ¥Êñ∞„Éú„Çø„É≥
        if st.button("üîÑ „Éá„Éº„ÇøÊõ¥Êñ∞", use_container_width=True):
            st.cache_data.clear()
            st.session_state.sheet_data = load_sheet_data(project_key)
            st.success("„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü")
            st.rerun()
        
        # ÊäïÁ®øË®≠ÂÆö
        st.subheader("üì§ ÊäïÁ®øË®≠ÂÆö")
        post_count = st.selectbox("ÊäïÁ®øÊï∞", [1, 2, 3, 4, 5], index=0)
        
        # ‰∫àÁ¥ÑÊäïÁ®øË®≠ÂÆö
        st.subheader("‚è∞ ‰∫àÁ¥ÑÊäïÁ®ø")
        enable_schedule = st.checkbox("‰∫àÁ¥ÑÊäïÁ®ø„ÇíÊúâÂäπ„Å´„Åô„Çã")
        
        schedule_times = []
        if enable_schedule:
            schedule_input = st.text_area(
                "‰∫àÁ¥ÑÊó•ÊôÇÔºà1Ë°å„Å´„Å§„Åç1‰ª∂Ôºâ",
                placeholder="2025-08-20 14:30\n15:00\n16:30",
                help="ÂΩ¢Âºè: YYYY-MM-DD HH:MM „Åæ„Åü„ÅØ HH:MM"
            )
            
            if schedule_input:
                lines = [line.strip() for line in schedule_input.split('\n') if line.strip()]
                now = datetime.now()
                
                for line in lines:
                    try:
                        if ':' in line and len(line) <= 5:  # HH:MMÂΩ¢Âºè
                            time_obj = datetime.strptime(line, '%H:%M')
                            schedule_dt = now.replace(
                                hour=time_obj.hour, 
                                minute=time_obj.minute, 
                                second=0, 
                                microsecond=0
                            )
                        else:  # ÂÆåÂÖ®„Å™Êó•ÊôÇÂΩ¢Âºè
                            schedule_dt = datetime.strptime(line, '%Y-%m-%d %H:%M')
                        
                        if schedule_dt > now:
                            schedule_times.append(schedule_dt)
                    except ValueError:
                        st.error(f"ÁÑ°Âäπ„Å™Êó•ÊôÇÂΩ¢Âºè: {line}")
                
                if schedule_times:
                    st.success(f"‰∫àÁ¥ÑÊôÇÂàª {len(schedule_times)}‰ª∂„ÇíË®≠ÂÆö")
    
    # „É°„Ç§„É≥„Ç®„É™„Ç¢
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìã „Éá„Éº„Çø‰∏ÄË¶ß")
        
        # „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        if st.session_state.sheet_data is None:
            st.session_state.sheet_data = load_sheet_data(project_key)
        
        df = st.session_state.sheet_data
        
        if df.empty:
            st.info("Êú™Âá¶ÁêÜ„ÅÆ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        else:
            # „Éá„Éº„Çø„Ç®„Éá„Ç£„Çø
            edited_df = st.data_editor(
                df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "ÈÅ∏Êäû": st.column_config.CheckboxColumn("ÈÅ∏Êäû", width="small"),
                    "„ÉÜ„Éº„Éû": st.column_config.TextColumn("„ÉÜ„Éº„Éû", width="medium"),
                    "ÂÆ£‰ºùURL": st.column_config.TextColumn("ÂÆ£‰ºùURL", width="large"),
                    "ÊäïÁ®øÂÖà": st.column_config.TextColumn("ÊäïÁ®øÂÖà", width="small"),
                    "„Ç¢„É≥„Ç´„Éº„ÉÜ„Ç≠„Çπ„Éà": st.column_config.TextColumn("„Ç¢„É≥„Ç´„Éº", width="medium"),
                    "„Çπ„ÉÜ„Éº„Çø„Çπ": st.column_config.TextColumn("„Çπ„ÉÜ„Éº„Çø„Çπ", width="small"),
                    "„Ç´„Ç¶„É≥„Çø„Éº": st.column_config.TextColumn("„Ç´„Ç¶„É≥„Çø„Éº", width="small")
                }
            )
            
            # ÊäïÁ®ø„Éú„Çø„É≥
            st.subheader("üöÄ ÊäïÁ®øÂÆüË°å")
            
            col_a, col_b = st.columns(2)
            
            with col_a:
                if st.button("üì§ ÈÅ∏ÊäûË°å„ÇíÊäïÁ®ø", type="primary", use_container_width=True):
                    selected_rows = edited_df[edited_df['ÈÅ∏Êäû'] == True]
                    
                    if len(selected_rows) == 0:
                        st.error("ÊäïÁ®ø„Åô„ÇãË°å„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                    elif len(selected_rows) > 1:
                        st.error("1Ë°å„ÅÆ„ÅøÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                    else:
                        row = selected_rows.iloc[0]
                        
                        # ÊäïÁ®øÂá¶ÁêÜÂÆüË°å
                        with st.spinner("ÊäïÁ®ø‰∏≠..."):
                            success = process_single_post(
                                row.to_dict(), 
                                project_key, 
                                schedule_times if enable_schedule else None
                            )
                        
                        if success:
                            st.success("ÊäïÁ®ø„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")
                            # „Éá„Éº„ÇøÊõ¥Êñ∞
                            time.sleep(2)
                            st.cache_data.clear()
                            st.session_state.sheet_data = load_sheet_data(project_key)
                            st.rerun()
                        else:
                            st.error("ÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
            
            with col_b:
                if st.button("üîÑ „Éá„Éº„ÇøÊõ¥Êñ∞", use_container_width=True):
                    st.cache_data.clear()
                    st.session_state.sheet_data = load_sheet_data(project_key)
                    st.success("„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü")
                    st.rerun()
    
    with col2:
        st.header("üìù ÂÆüË°å„É≠„Ç∞")
        
        # „É≠„Ç∞Ë°®Á§∫
        log_container = st.container()
        with log_container:
            display_logs()
        
        # „É≠„Ç∞„ÇØ„É™„Ç¢„Éú„Çø„É≥
        if st.button("üóëÔ∏è „É≠„Ç∞„ÇØ„É™„Ç¢", use_container_width=True):
            st.session_state.log_messages = []
            st.rerun()
    
    # „Éï„ÉÉ„Çø„ÉºÊÉÖÂ†±
    st.markdown("---")
    col_info1, col_info2, col_info3 = st.columns(3)
    
    with col_info1:
        st.metric("Êú™Âá¶ÁêÜ‰ª∂Êï∞", len(df) if not df.empty else 0)
    
    with col_info2:
        total_logs = len(st.session_state.log_messages)
        st.metric("„É≠„Ç∞‰ª∂Êï∞", total_logs)
    
    with col_info3:
        last_update = datetime.now().strftime("%H:%M:%S")
        st.metric("ÊúÄÁµÇÊõ¥Êñ∞", last_update)

if __name__ == "__main__":
    main()
